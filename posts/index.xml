<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Random Musings</title>
    <link>https://sayembd.github.io/posts/</link>
    <description>Recent content in Posts on Random Musings</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 19 Oct 2020 02:38:52 +0200</lastBuildDate><atom:link href="https://sayembd.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Build Observable Systems - An Introduction to Observability</title>
      <link>https://sayembd.github.io/posts/how-to-build-observable-system-an-introduction-to-observability/</link>
      <pubDate>Mon, 19 Oct 2020 02:38:52 +0200</pubDate>
      
      <guid>https://sayembd.github.io/posts/how-to-build-observable-system-an-introduction-to-observability/</guid>
      <description>Introduction Recently I have been hearing about observability more and more. The promise that an observable system can help us to debug and identify performance and reliability issues in a microservice architecture sounded quite good to me. Hence I decided to read up and learn more on this topic. In this blog post I will try to summarise what I have learned about observability so far.
What is Observability? Observability is a term or a concept that has its root in Physics, mainly in Control Theory.</description>
    </item>
    
    <item>
      <title>Writing Executable Specifications With Junit5 Mockito and AssertJ</title>
      <link>https://sayembd.github.io/posts/writing-executable-specifications-with-junit5-mockito-and-assertj/</link>
      <pubDate>Sun, 26 Apr 2020 22:40:20 +0200</pubDate>
      
      <guid>https://sayembd.github.io/posts/writing-executable-specifications-with-junit5-mockito-and-assertj/</guid>
      <description>Executable Specifications are tests that can also serve as design specifications. They enable technical and business teams to get on the same page by enabling the use of a common language (in DDD-world this is also known as Ubiquitous Language). They function as documentations for the future maintainers of the code. In this article we will see an opinionated way of writing automated tests which could also function as Executable Specifications.</description>
    </item>
    
  </channel>
</rss>
